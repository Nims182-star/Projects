import os
import hashlib
import magic

class MalwareAnalysisTool:
    def __init__(self, file_path):
        self.file_path = file_path
        self.magic = magic.Magic(mime=True)

    def calculate_hash(self):
        """Calculate the SHA-256 hash of the file."""
        sha256_hash = hashlib.sha256()
        with open(self.file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

    def check_file_type(self):
        """Check the file type using the magic library."""
        file_type = self.magic.from_file(self.file_path)
        return file_type

    def check_for_malicious_strings(self):
        """Check for common malicious strings in the file."""
        malicious_strings = ["exec", "system", "shell", "cmd", "powershell", "wscript.shell"]
        with open(self.file_path, "r", errors="ignore") as f:
            content = f.read().lower()
            for string in malicious_strings:
                if string in content:
                    return True
        return False

    def analyze(self):
        """Perform basic static analysis on the file."""
        file_hash = self.calculate_hash()
        file_type = self.check_file_type()
        contains_malicious_strings = self.check_for_malicious_strings()

        print(f"File Path: {self.file_path}")
        print(f"File Hash (SHA-256): {file_hash}")
        print(f"File Type: {file_type}")
        print(f"Contains Malicious Strings: {contains_malicious_strings}")

if __name__ == "__main__":
    file_path = input("Enter the path of the file to analyze: ")
    if os.path.exists(file_path):
        tool = MalwareAnalysisTool(file_path)
        tool.analyze()
    else:
        print("File not found.")
